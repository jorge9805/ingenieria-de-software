// pages/PostDetail.jsx
import { useEffect, useState } from 'react'
import { useParams, useNavigate, Link } from 'react-router-dom'
import TourCard from '../components/TourCard'
import ConfirmModal from '../components/ConfirmModal'
import { Star } from 'lucide-react'

export default function PostDeta  // Mostrar loading mientras esperamos el token o el post
  if (!token || !post) {
    return (
      <div className="page-container">
        <div className="loading-container">
          <div className="loading-spinner">🔄</div>
          <h2>Cargando post...</h2>
          <p>Por favor espera un momento.</p>
        </div>
      </div>
    )
  }

  return ( token }) {
  const { id } = useParams()
  const [post, setPost] = useState(null)
  const [error, setError] = useState(null)
  const [editingComment, setEditingComment] = useState(null)
  const [editContent, setEditContent] = useState('')
  const [editRating, setEditRating] = useState(5)
  const [isUpdating, setIsUpdating] = useState(false)
  const [showDeleteModal, setShowDeleteModal] = useState(false)
  const [deleteTarget, setDeleteTarget] = useState(null) // { type: 'comment', id: commentId } or { type: 'post', id: postId }
  const navigate = useNavigate()

  useEffect(() => {
    const fetchPost = async () => {
      console.log('[PostDetail] Fetcheando post con ID:', id)
      console.log('[PostDetail] Token disponible:', !!token)
      console.log('[PostDetail] Token value:', token)
      
      try {
        const res = await fetch(`http://localhost:4000/api/posts/${id}`, { 
          headers: { Authorization: `Bearer ${token}` } 
        })
        
        console.log('[PostDetail] Response status:', res.status)
        console.log('[PostDetail] Response ok:', res.ok)
        
        if (!res.ok) {
          const errorText = await res.text()
          console.log('[PostDetail] Error response:', errorText)
          throw new Error('No se pudo cargar el post')
        }
        
        const data = await res.json()
        console.log('[PostDetail] Post data recibido:', data)
        setPost(data)
      } catch (err) {
        console.error('[PostDetail] Error fetching post:', err)
        setError(err.message)
      }
    }

    // Solo hacer fetch si tenemos el ID y el token
    if (id && token) {
      fetchPost()
    } else {
      console.log('[PostDetail] Esperando ID o token...', { id: !!id, token: !!token })
    }
  }, [id, token])

  const handleToggleFavorite = (updatedPost) => {
    setPost(updatedPost)
  }

  const handleDelete = (postId) => {
    setDeleteTarget({ type: 'post', id: postId })
    setShowDeleteModal(true)
  }

  // Función para iniciar la edición de un comentario
  const handleEditComment = (comment) => {
    setEditingComment(comment.id)
    setEditContent(comment.content)
    setEditRating(comment.rating || 5)
  }

  // Función para cancelar la edición
  const handleCancelEdit = () => {
    setEditingComment(null)
    setEditContent('')
    setEditRating(5)
  }

  // Función para guardar la edición del comentario
  const handleSaveEdit = async () => {
    if (!editContent.trim()) {
      alert('El comentario no puede estar vacío')
      return
    }

    setIsUpdating(true)
    try {
      const res = await fetch(`http://localhost:4000/api/comments/${editingComment}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ 
          content: editContent.trim(), 
          rating: editRating 
        })
      })

      if (!res.ok) {
        const errorData = await res.json()
        throw new Error(errorData.error || 'No se pudo actualizar el comentario')
      }

      // Recargar el post para mostrar el comentario actualizado
      const updatedPost = await fetch(`http://localhost:4000/api/posts/${id}`, {
        headers: { Authorization: `Bearer ${token}` }
      })
      
      if (updatedPost.ok) {
        const data = await updatedPost.json()
        setPost(data)
        
        // Mostrar mensaje de éxito
        const notification = document.createElement('div')
        notification.textContent = '✅ Comentario actualizado correctamente'
        notification.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          background: #51cf66;
          color: white;
          padding: 12px 20px;
          border-radius: 8px;
          box-shadow: 0 4px 12px rgba(0,0,0,0.1);
          z-index: 1000;
          font-weight: 600;
        `
        document.body.appendChild(notification)
        setTimeout(() => notification.remove(), 3000)
      }

      // Limpiar estado de edición
      handleCancelEdit()
    } catch (err) {
      console.error('Error actualizando comentario:', err)
      alert(`Error: ${err.message}`)
    } finally {
      setIsUpdating(false)
    }
  }

  // Función para eliminar un comentario
  const handleDeleteComment = (commentId) => {
    setDeleteTarget({ type: 'comment', id: commentId })
    setShowDeleteModal(true)
  }

  // Función para confirmar eliminación
  const handleConfirmDelete = async () => {
    if (!deleteTarget) return

    try {
      if (deleteTarget.type === 'comment') {
        const res = await fetch(`http://localhost:4000/api/comments/${deleteTarget.id}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        })

        if (!res.ok) {
          const errorData = await res.json()
          throw new Error(errorData.error || 'No se pudo eliminar el comentario')
        }

        // Recargar el post para mostrar los comentarios actualizados
        const updatedPost = await fetch(`http://localhost:4000/api/posts/${id}`, {
          headers: { Authorization: `Bearer ${token}` }
        })
        
        if (updatedPost.ok) {
          const data = await updatedPost.json()
          setPost(data)
          
          // Mostrar mensaje de éxito
          const notification = document.createElement('div')
          notification.textContent = '🗑️ Comentario eliminado correctamente'
          notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #ff6b6b;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            z-index: 1000;
            font-weight: 600;
          `
          document.body.appendChild(notification)
          setTimeout(() => notification.remove(), 3000)
        }
      } else if (deleteTarget.type === 'post') {
        // Eliminar post
        const res = await fetch(`http://localhost:4000/api/posts/${deleteTarget.id}`, {
          method: 'DELETE',
          headers: { 
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        })
        
        if (res.ok) {
          // Mostrar notificación de éxito
          const notification = document.createElement('div')
          notification.textContent = '🗑️ Post eliminado correctamente'
          notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #ff6b6b;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            z-index: 1000;
            font-weight: 600;
          `
          document.body.appendChild(notification)
          setTimeout(() => notification.remove(), 3000)
          
          // Redirigir al home
          navigate('/')
        } else {
          throw new Error('No se pudo eliminar el post')
        }
      }
    } catch (err) {
      console.error('Error eliminando:', err)
      alert(`Error: ${err.message}`)
    } finally {
      setShowDeleteModal(false)
      setDeleteTarget(null)
    }
  }

  // Función para cancelar eliminación
  const handleCancelDelete = () => {
    setShowDeleteModal(false)
    setDeleteTarget(null)
  }

  // Función para renderizar estrellas de rating
  const renderStars = (rating) => {
    if (!rating) return null
    
    return (
      <div className="comment-rating">
        {Array.from({ length: 5 }, (_, index) => (
          <Star
            key={index}
            size={14}
            fill={index < rating ? '#ffd43b' : 'none'}
            color={index < rating ? '#ffd43b' : '#e2e8f0'}
            className="rating-star"
          />
        ))}
        <span className="rating-number">({rating})</span>
      </div>
    )
  }

  // Función para renderizar estrellas editables
  const renderEditableStars = () => {
    return (
      <div className="star-rating edit-mode">
        {Array.from({ length: 5 }, (_, index) => {
          const starValue = index + 1
          const isActive = starValue <= editRating
          
          return (
            <button
              key={starValue}
              type="button"
              className={`star-button ${isActive ? 'active' : ''}`}
              onClick={() => setEditRating(starValue)}
            >
              <Star 
                size={20} 
                fill={isActive ? '#ffd43b' : 'none'}
                color={isActive ? '#ffd43b' : '#e2e8f0'}
                className="star-icon"
              />
            </button>
          )
        })}
        <span className="rating-text edit">
          {editRating} de 5 estrella{editRating !== 1 ? 's' : ''}
        </span>
      </div>
    )
  }

  if (error) {
    return (
      <div className="page-container">
        <div className="error-container">
          <div className="error-icon">😞</div>
          <h2>¡Oops! Algo salió mal</h2>
          <p>{error}</p>
          <Link to="/" className="btn btn-primary">Volver al inicio</Link>
        </div>
      </div>
    )
  }

  // Mostrar loading mientras esperamos el token o el post
  if (!token || !post) {
    return (
      <div className="page-container">
        <div className="loading-container">
          <div className="loading-spinner">�</div>
          <h2>Cargando post...</h2>
          <p>Por favor espera un momento.</p>
        </div>
      </div>
    )
  }
        </div>
      </div>
    )
  }

  return (
    <div className="page-container">
      <div className="post-detail">
        {/* Breadcrumb */}
        <nav className="breadcrumb">
          <Link to="/" className="breadcrumb-link">🏠 Inicio</Link>
          <span className="breadcrumb-separator">›</span>
          <span className="breadcrumb-current">Detalle del post</span>
        </nav>

        {/* Post principal */}
        <div className="post-detail-card">
          <TourCard 
            post={post} 
            user={user} 
            userId={userId}
            token={token} 
            onToggleFavorite={handleToggleFavorite}
            isDetailView={true}
          />
          
          {/* Descripción expandida */}
          {post.description && (
            <div className="post-description">
              <h3>📝 Descripción completa</h3>
              <div className="description-content">
                {post.description}
              </div>
            </div>
          )}
        </div>

        {/* Sección de comentarios */}
        <div className="comments-section">
          <div className="comments-header">
            <h3>💬 Comentarios ({post.comments?.length || 0})</h3>
            {user && (
              <Link 
                to={`/comment/${post.id}`} 
                className="btn btn-secondary btn-icon"
              >
                <span>✏️</span>
                Agregar comentario
              </Link>
            )}
          </div>

          {post.comments && post.comments.length > 0 ? (
            <div className="comments-list">
              {post.comments.map((comment, index) => (
                <div key={comment.id || index} className="comment-card">
                  <div className="comment-header">
                    <div className="comment-avatar">
                      {comment.user_name?.charAt(0).toUpperCase() || '👤'}
                    </div>
                    <div className="comment-info">
                      <div className="comment-user-line">
                        <h4 className="comment-author">{comment.user_name}</h4>
                        {editingComment === comment.id ? (
                          renderEditableStars()
                        ) : (
                          comment.rating && renderStars(comment.rating)
                        )}
                      </div>
                      <span className="comment-date">
                        {comment.created_at ? new Date(comment.created_at).toLocaleDateString() : 'Fecha no disponible'}
                      </span>
                    </div>
                    
                    {/* Botones de acción para el propietario del comentario */}
                    {user === comment.user_name && (
                      <div className="comment-actions">
                        {editingComment === comment.id ? (
                          <>
                            <button 
                              onClick={handleSaveEdit}
                              disabled={isUpdating}
                              className="btn-action save"
                              title="Guardar cambios"
                            >
                              {isUpdating ? '⏳' : '✅'}
                            </button>
                            <button 
                              onClick={handleCancelEdit}
                              disabled={isUpdating}
                              className="btn-action cancel"
                              title="Cancelar edición"
                            >
                              ❌
                            </button>
                          </>
                        ) : (
                          <>
                            <button 
                              onClick={() => handleEditComment(comment)}
                              className="btn-action edit"
                              title="Editar comentario"
                            >
                              ✏️
                            </button>
                            <button 
                              onClick={() => handleDeleteComment(comment.id)}
                              className="btn-action delete"
                              title="Eliminar comentario"
                            >
                              🗑️
                            </button>
                          </>
                        )}
                      </div>
                    )}
                  </div>
                  
                  <div className="comment-text">
                    {editingComment === comment.id ? (
                      <div className="edit-comment-form">
                        <textarea
                          value={editContent}
                          onChange={(e) => setEditContent(e.target.value)}
                          className="edit-textarea"
                          rows={4}
                          maxLength={1000}
                          disabled={isUpdating}
                        />
                        <div className="char-counter">
                          {editContent.length}/1000 caracteres
                        </div>
                      </div>
                    ) : (
                      comment.content
                    )}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="empty-comments">
              <div className="empty-icon">💭</div>
              <h4>Aún no hay comentarios</h4>
              <p>¡Sé el primero en compartir tu opinión sobre este destino!</p>
              {user && (
                <Link 
                  to={`/comment/${post.id}`} 
                  className="btn btn-primary"
                >
                  Escribir primer comentario
                </Link>
              )}
            </div>
          )}

          {!user && (
            <div className="login-prompt">
              <p>
                <Link to="/login" className="auth-link">Inicia sesión</Link> para comentar
              </p>
            </div>
          )}
        </div>
      </div>

      {/* Modal de confirmación para eliminación */}
      <ConfirmModal 
        isOpen={showDeleteModal}
        onClose={handleCancelDelete}
        onConfirm={handleConfirmDelete}
        title={deleteTarget?.type === 'comment' ? 'Eliminar Comentario' : 'Eliminar Post'}
        message={
          deleteTarget?.type === 'comment' 
            ? '¿Estás seguro de que quieres eliminar este comentario? Esta acción no se puede deshacer.'
            : '¿Estás seguro de que quieres eliminar este post? Todos los comentarios también se eliminarán. Esta acción no se puede deshacer.'
        }
        confirmText="Eliminar"
        cancelText="Cancelar"
        type="danger"
      />
    </div>
  )
}
